import{_ as e,c as r,o as a,a1 as s}from"./chunks/framework.C88IP-8t.js";const u=JSON.parse('{"title":"Wisely Data Mart Dagster Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"posts/data-engineering/data-mart-dagster-architecture.md","filePath":"posts/data-engineering/data-mart-dagster-architecture.md"}'),o={name:"posts/data-engineering/data-mart-dagster-architecture.md"};function i(l,t,n,d,c,h){return a(),r("div",null,t[0]||(t[0]=[s('<h1 id="wisely-data-mart-dagster-architecture" tabindex="-1">Wisely Data Mart Dagster Architecture <a class="header-anchor" href="#wisely-data-mart-dagster-architecture" aria-label="Permalink to &quot;Wisely Data Mart Dagster Architecture&quot;">​</a></h1><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>wisely <code>data-governance</code> 의 Dagster 아키텍처</p><h2 id="디렉터리-구조" tabindex="-1">디렉터리 구조 <a class="header-anchor" href="#디렉터리-구조" aria-label="Permalink to &quot;디렉터리 구조&quot;">​</a></h2><ul><li><strong>orchestrator</strong>: Dagster의 핵심 구성 요소로, 데이터 파이프라인의 전체적인 실행을 관리하고 조정</li><li><strong>transformer</strong>: dbt 프로젝트가 위치합니다.</li></ul><h3 id="orchestrator" tabindex="-1">orchestrator <a class="header-anchor" href="#orchestrator" aria-label="Permalink to &quot;orchestrator&quot;">​</a></h3><p><code>orchestrator</code> 디렉터리는 다음과 같은 하위 디렉터리 및 파일로 구성됩니다.</p><ul><li><strong>assets</strong>: 데이터 Asset을 정의</li><li><strong>jobs</strong>: 여러 asset들을 묶어 실행하는 job을 정의</li><li><strong>sensors</strong>: 외부 시스템의 변경을 감지하여 job을 실행하는 sensor를 정의</li><li><strong>schedules</strong>: 정해진 시간에 job을 실행하는 schedule을 정의</li><li><strong>resources</strong>: 외부 시스템과의 연결을 위한 resource를 정의</li><li><strong>definitions.py</strong>: asset, job, sensor, schedule 등을 Dagster에 등록</li></ul><h3 id="transformer" tabindex="-1">transformer <a class="header-anchor" href="#transformer" aria-label="Permalink to &quot;transformer&quot;">​</a></h3><p><code>transformer</code> 디렉터리는 dbt 프로젝트로 구성되어 있으며, 다음과 같은 하위 디렉터리로 구성됩니다.</p><ul><li><strong>models</strong>: dbt 모델이 위치합니다. 이 모델들은 데이터 마트의 테이블을 정의하고 변환하는 SQL 쿼리를 포함합니다.</li></ul><h2 id="dagster-아키텍처" tabindex="-1">Dagster 아키텍처 <a class="header-anchor" href="#dagster-아키텍처" aria-label="Permalink to &quot;Dagster 아키텍처&quot;">​</a></h2><p><code>data-mart</code> 프로젝트는 Dagster를 사용하여 데이터 파이프라인을 오케스트레이션합니다. 주요 구성 요소는 다음과 같습니다.</p><ol><li><p><strong>dbt Assets</strong>: <code>transformer/models</code> 디렉터리의 dbt 모델들은 Dagster의 <code>dbt_assets</code>로 정의됩니다. 각 dbt 모델은 Dagster asset에 해당하며, 데이터 마트의 테이블을 나타냅니다.</p></li><li><p><strong>Jobs</strong>: 관련된 dbt asset들을 그룹화하여 job으로 정의합니다. 예를 들어, 특정 데이터 도메인과 관련된 모든 dbt 모델을 실행하는 job을 생성할 수 있습니다.</p></li><li><p><strong>Schedules/Sensors</strong>: job을 정기적으로 실행하거나 특정 조건이 충족되었을 때 실행하도록 schedule 또는 sensor를 사용합니다. 예를 들어, 매일 아침 데이터 마트를 업데이트하는 schedule을 정의할 수 있습니다.</p></li></ol><h2 id="데이터-흐름" tabindex="-1">데이터 흐름 <a class="header-anchor" href="#데이터-흐름" aria-label="Permalink to &quot;데이터 흐름&quot;">​</a></h2><ol><li>외부 데이터 소스에서 원본 데이터를 수집합니다.</li><li>dbt 모델을 사용하여 원본 데이터를 변환하고 데이터 마트의 테이블을 생성합니다.</li><li>Dagster는 dbt 모델의 의존성을 파악하고 올바른 순서로 실행합니다.</li><li>변환된 데이터는 데이터 웨어하우스에 저장되어 분석 및 시각화에 사용됩니다.</li></ol>',16)]))}const b=e(o,[["render",i]]);export{u as __pageData,b as default};
